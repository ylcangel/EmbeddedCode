C51 COMPILER V9.60.0.0   W25Q32                                                            12/29/2021 14:27:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE W25Q32
OBJECT MODULE PLACED IN .\Objects\w25q32.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE w25q32.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\w2
                    -5q32.lst) TABS(2) OBJECT(.\Objects\w25q32.obj)

line level    source

   1          #include "global.h"
   2          // one master one slave mode
   3          #define PAGE_MAX_BYTES 256
   4          #define SECTOR_SIZE 0x1000
   5          #define BLOCK_SIZE_64K 0x10000 // 64k
   6          #define BLOCK_SIZE_32K 0x8000 // 32k
   7          #define MAX_BLOCK_64K_NR 64
   8          #define MAX_BLOCK_32K_NR (MAX_BLOCK_64K_NR * 2)
   9          #define SECTOR_SIZE_PER_BLOCK 16
  10          #define MAX_SECTOR_SIZE (SECTOR_SIZE_PER_BLOCK * SECTOR_SIZE_PER_BLOCK) // 1024
  11          
  12          #define SPI_ENABLE spi_enable()
  13          #define SPI_DISABLE spi_disable()
  14          
  15          #define DUMMY_DATA 0x0
  16          // inst, format {inst, data}, every inst 1 byte length
  17          #define WRITE_ENABLE 0x6 //  1
  18          #define WRITE_DISABLE 0x4 // 1
  19          #define READ_STATUS_REGISTER1 0x5 // 2
  20          #define READ_STATUS_REGISTER2 0x35 // 2
  21          #define WRITE_STATUS_REGISTER 0x1 // 3
  22          #define PAGE_PROGARAM 0x2 // 5
  23          #define QUAD_PAGE_PROGRAM 0x32 // 5
  24          #define BLOCK_ERASE_64K 0xd8 // 4
  25          #define BLOCK_ERASE_32K 0x52 // 4
  26          #define SECTOR_ERASE 0x20 // 4
  27          #define CHIP_ERASE 0xc7 // 1
  28          #define CHIP_ERASE1 0x60 // eq CHIP_ERASE
  29          #define ERASE_SUSPEND 0x75 // 1
  30          #define ERASE_RESUME 0x7a // 1
  31          #define POWER_DONW 0xb9 // 1
  32          #define HIGH_PERFORMANCE_MODE 0xa3 // 4
  33          #define MODE_BIT_RESET 0xff // 2, byte2 was always 0xff
  34          #define RELEASE_POWER_DOWN_OR_HPM_DEVICE_ID 0xab // 5
  35          #define MANUFACTURER_DEVICE_ID 0x90 // 6
  36          #define READ_UNIQUE_ID 0x4b // 6
  37          #define JEDEC_ID 0x9f // 4
  38          #define READ_DATA 0x3 //  5
  39          #define FAST_READ 0xb // 6
  40          #define FAST_READ_DUAL_OUTPUT 0x3b // 6
  41          #define FAST_READ_DUAL_IO 0xbb // 4
  42          #define FAST_READ_QUAD_OUTPUT 0x6b // 6
  43          #define FAST_READ_QUAD_IO 0xeb // 4
  44          
  45          #define IS_BUSY(S_Register1) (S_Register1 & 0x1)
  46          
  47          static void write_enable() {
  48   1        SPI_ENABLE;
  49   1        spi_rw(WRITE_ENABLE);
  50   1        SPI_DISABLE;
  51   1      }
  52          
  53          static void write_disable() {
  54   1        SPI_ENABLE;
C51 COMPILER V9.60.0.0   W25Q32                                                            12/29/2021 14:27:11 PAGE 2   

  55   1        spi_rw(WRITE_DISABLE);
  56   1        SPI_DISABLE;
  57   1      }
  58          
  59          extern u1 read_SR1() {
  60   1        u1 sr;
  61   1        SPI_ENABLE;
  62   1        spi_rw(READ_STATUS_REGISTER1);
  63   1        sr = spi_rw(DUMMY_DATA);
  64   1        SPI_DISABLE;
  65   1        return sr;
  66   1      }
  67          
  68          extern u1 read_SR2() {
  69   1        u1 sr;
  70   1        SPI_ENABLE;
  71   1        spi_rw(READ_STATUS_REGISTER2);
  72   1        sr = spi_rw(DUMMY_DATA);
  73   1        SPI_DISABLE;
  74   1        return sr;
  75   1      }
  76          
  77          
  78          extern void write_SR(u2 val) {
  79   1        u1 low = val & 0xf;
  80   1        u1 high = (val >> 8) & 0xf;
  81   1        write_enable();
  82   1        SPI_ENABLE;
  83   1        spi_rw(WRITE_STATUS_REGISTER);
  84   1        spi_rw(high); // MSB 
  85   1        spi_rw(low); //
  86   1        SPI_DISABLE;
  87   1      }
  88          
  89          extern void read(u1* pbuf, u4 len, u4 addr) {
  90   1        SPI_ENABLE;
  91   1        spi_rw(READ_DATA);
  92   1        spi_rw((u1)(addr >> 16));
  93   1        spi_rw((u1)(addr >> 8));
  94   1        spi_rw((u1)(addr));
  95   1        while(len--) {
  96   2          *pbuf = spi_rw(DUMMY_DATA);
  97   2          pbuf++;
  98   2        }
  99   1        SPI_DISABLE;
 100   1      }
 101          
 102          extern void fast_read(u1* pbuf, u4 len, u4 addr) {
 103   1        SPI_ENABLE;
 104   1        spi_rw(FAST_READ);
 105   1        spi_rw((u1)(addr >> 16));
 106   1        spi_rw((u1)(addr >> 8));
 107   1        spi_rw((u1)(addr));
 108   1        spi_rw(DUMMY_DATA);
 109   1        while(len--) {
 110   2          *pbuf = spi_rw(DUMMY_DATA);
 111   2          pbuf++;
 112   2        }
 113   1        SPI_DISABLE;
 114   1      }
 115          
 116          extern void page_write(u1* pbuf, u4 len, u4 addr) {
C51 COMPILER V9.60.0.0   W25Q32                                                            12/29/2021 14:27:11 PAGE 3   

 117   1        if (len > PAGE_MAX_BYTES) {
 118   2          printf("write size over the limit");
 119   2          return;
 120   2        }
 121   1        
 122   1        if ( len == PAGE_MAX_BYTES) {
 123   2          addr &= 0xffff00;
 124   2        }
 125   1        
 126   1        write_enable();
 127   1        
 128   1        SPI_ENABLE;
 129   1        spi_rw(PAGE_PROGARAM);
 130   1        spi_rw((u1)(addr >> 16));
 131   1        spi_rw((u1)(addr >> 8));
 132   1        spi_rw((u1)(addr));
 133   1      
 134   1        while(len--) {
 135   2          spi_rw(*pbuf);
 136   2          pbuf++;
 137   2        }
 138   1        SPI_DISABLE;
 139   1        
 140   1        while(IS_BUSY(read_SR1()));
 141   1      }
 142          
 143          extern void sector_earse(u4 sectorNr) {
 144   1        u4 addr = 0;
 145   1        if (sectorNr == 0) {
 146   2          sectorNr = 1;
 147   2        }
 148   1        
 149   1        sectorNr = sectorNr -1;
 150   1        
 151   1        if (sectorNr > MAX_SECTOR_SIZE) {
 152   2          printf("bad sector nr");
 153   2          return;
 154   2        }
 155   1        
 156   1        addr = (sectorNr * SECTOR_SIZE) & 0x3ff000;
 157   1        
 158   1        write_enable();
 159   1        while(IS_BUSY(read_SR1()));
 160   1          
 161   1        SPI_ENABLE;
 162   1        spi_rw(SECTOR_ERASE);
 163   1        spi_rw((u1)(addr >> 16));
 164   1        spi_rw((u1)(addr >> 8));
 165   1        spi_rw((u1)(addr));
 166   1        
 167   1        SPI_DISABLE;
 168   1        while(IS_BUSY(read_SR1()));
 169   1        
 170   1      }
 171          
 172          extern void block_earse(boolean is32k, int blockNr) {
 173   1        u4 addr = 0;
 174   1        if (blockNr == 0) {
 175   2          blockNr =1;
 176   2        }
 177   1        blockNr = blockNr -1;
 178   1        
C51 COMPILER V9.60.0.0   W25Q32                                                            12/29/2021 14:27:11 PAGE 4   

 179   1        if (!is32k) {
 180   2          if (blockNr > MAX_BLOCK_64K_NR) {
 181   3            printf("bad block nr with 64k");
 182   3            return;
 183   3          }
 184   2          
 185   2          addr = (blockNr * BLOCK_SIZE_64K) & 0x3f0000;
 186   2        }
 187   1        
 188   1        if (blockNr > BLOCK_ERASE_32K) {
 189   2            printf("bad block nr with 32k");
 190   2            return;
 191   2        }
 192   1        
 193   1        if (is32k) {
 194   2          addr = (blockNr * BLOCK_SIZE_32K) & 0x7f8000;
 195   2        }
 196   1        
 197   1        write_enable();
 198   1        while(IS_BUSY(read_SR1()));
 199   1        
 200   1        SPI_ENABLE;
 201   1        if (is32k) {
 202   2          spi_rw(BLOCK_ERASE_32K);
 203   2        } else {
 204   2          spi_rw(BLOCK_ERASE_64K);
 205   2        }
 206   1        
 207   1        spi_rw((u1)(addr >> 16));
 208   1        spi_rw((u1)(addr >> 8));
 209   1        spi_rw((u1)(addr));
 210   1        
 211   1        SPI_DISABLE;
 212   1        while(IS_BUSY(read_SR1()));
 213   1      }
 214          
 215          extern void chip_earse() {
 216   1        write_enable();
 217   1        while(IS_BUSY(read_SR1()));
 218   1        SPI_ENABLE;
 219   1        spi_rw(CHIP_ERASE);
 220   1        SPI_DISABLE;
 221   1        while(IS_BUSY(read_SR1()));
 222   1      }
 223          
 224          extern void read_device_id() {
 225   1        SPI_ENABLE;
 226   1        spi_rw(MANUFACTURER_DEVICE_ID);
 227   1        spi_rw(DUMMY_DATA);
 228   1        spi_rw(DUMMY_DATA);
 229   1        spi_rw(0);
 230   1        
 231   1        printf("MANUFACTURER ID: %x\r\n", spi_rw(DUMMY_DATA));
 232   1        printf("DEVICE ID: %x\r\n", spi_rw(DUMMY_DATA));
 233   1        SPI_DISABLE;
 234   1      }
 235          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    809    ----
   CONSTANT SIZE    =    122    ----
C51 COMPILER V9.60.0.0   W25Q32                                                            12/29/2021 14:27:11 PAGE 5   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
