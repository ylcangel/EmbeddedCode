#include "global.h"
#include "font.h"
// sh1106 oled 1.3 inch

sbit OLED_RESET = P5^2;
sbit OLED_DC = P5^3;

#define PAGE_SIZE 8
#define SEGEMENT_SIZE 132
#define COLUMN_SIZE 64

static u1 xdata OLED_GRAM[8][132];

static void oled_command(u1 cmd) {
	OLED_DC = 0; // write command
	spi_enable();
	spi_rw(cmd);
	spi_disable();
	time_HoggingDelayUs(5);
}

static void oled_data(u1 dat) {
	OLED_DC = 1; // write data
	spi_enable();
	spi_rw(dat);
	spi_disable();
	time_HoggingDelayUs(5);
}

static void oled_datas(u1* dat, int len) {
	int i = 0;
	OLED_DC = 1; // write data
	spi_enable();
	for (; i < len; i++) {
		spi_rw(*dat++);
	}
	spi_disable();
	time_HoggingDelayUs(5);
}

void oled_init() {
	OLED_RESET = 0;
	time_HoggingDelayMs(100);
	OLED_RESET = 1;
	time_HoggingDelayMs(100);
	#if 0
	oled_command(0xAE);//--turn off oled panel
	oled_command(0x02);//---set low column address
	oled_command(0x10);//---set high column address
	oled_command(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
	oled_command(0x81);//--set contrast control register
	oled_command(0xCF); // Set SEG Output Current Brightness
	oled_command(0xA1);//--Set SEG/Column Mapping     0xa0???? 0xa1??
	oled_command(0xC8);//Set COM/Row Scan Direction   0xc0???? 0xc8??
	oled_command(0xA6);//--set normal display
	oled_command(0xA8);//--set multiplex ratio(1 to 64)
	oled_command(0x3f);//--1/64 duty
	oled_command(0xD3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
	oled_command(0x00);//-not offset
	oled_command(0xd5);//--set display clock divide ratio/oscillator frequency
	oled_command(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
	oled_command(0xD9);//--set pre-charge period
	oled_command(0xF1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	oled_command(0xDA);//--set com pins hardware configuration
	oled_command(0x12);
	oled_command(0xDB);//--set vcomh
	oled_command(0x40);//Set VCOM Deselect Level
	oled_command(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
	oled_command(0x02);//
	oled_command(0x8D);//--set Charge Pump enable/disable
	oled_command(0x14);//--set(0x10) disable
	oled_command(0xA4);// Disable Entire Display On (0xa4/0xa5)
	oled_command(0xA6);// Disable Inverse Display On (0xa6/a7) 
	oled_command(0X8D);  //SET DCDC??
	oled_command(0X14);  //DCDC ON
	#endif
	//oled_command(0xAD);
	//oled_command(0x8A);

	oled_command(0XAF);  //DISPLAY ON
	oled_command(0xA1); // from left to right
	oled_command(0xC8); // up to down
	oled_command(0x81);//--set contrast control register
	oled_command(0x60); // Set SEG Output Current Brightness
	
	#if 0
	oled_command(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
	oled_command(0x0);//
	
	oled_command(0xA1); // from left to right
	oled_command(0xC8); // up to down
	
	oled_command(0xA6); // normal dis
	oled_command(0x40); // start display line
	oled_command(0xB0); //page
	oled_command(0x01); // column low
	oled_command(0x10); // column high
	
	oled_command(0xDA);
	oled_command(0x02);
	#endif
	
}

void oled_clear() {
	u1 i,j;
	u1 page;

	oled_command(0x00);//---set low column address
	oled_command(0x10);//---set high column address
	
	page = 0xB0;
	for(i = 0; i < 8; i++) {
	oled_command(page+i);
		for(j = 0; j < 132; j++) {
			oled_data(0x0);
		}
	}
}

void oled_display() {
	u1 i,j;
	u1 page;

	oled_command(0x00);//---set low column address
	oled_command(0x10);//---set high column address
	
	page = 0xB0;
	for(i = 0; i < 8; i++) {
	oled_command(page+i);
		for(j = 0; j < 132; j++) {
			oled_data(0xff);
		}
	}
}

void oled_wdata(u1 dat) {
	u1 i,j;
	u1 page;

	oled_command(0x00);//---set low column address
	oled_command(0x10);//---set high column address
	
	page = 0xb0;
	for(i = 0; i < 8; i++) {
	oled_command(page+i);
		for(j = 0; j < 132; j++) {
			oled_data(dat);
		}
	}
}

void oled_wpage(u1 page, u1 dat) {
	u1 j;

	oled_command(0x00);//---set low column address
	oled_command(0x10);//---set high column address

	oled_command(0xb0+page);
	for(j = 0; j < 132; j++) {
		oled_data(dat);
	}
}

void oled_page_display_updown() {
	u1 i;
	for (i = 0; i < 8; i++) {
			oled_wpage(i, 0x1);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x2);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x4);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x8);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x10);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x20);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x40);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x80);
			time_HoggingDelayMs(500);
			oled_wpage(i, 0x0);
	}
}

void oled_display_updown() {
	oled_wdata(0x1);
	time_HoggingDelayMs(500);
	oled_wdata(0x3);
	time_HoggingDelayMs(500);
	oled_wdata(0x7);
	time_HoggingDelayMs(500);
	oled_wdata(0xf);
	time_HoggingDelayMs(500);
	oled_wdata(0x1f);
	time_HoggingDelayMs(500);
	oled_wdata(0x3f);
	time_HoggingDelayMs(500);
	oled_wdata(0x7f);
	time_HoggingDelayMs(500);
	oled_wdata(0xff);
}

void oled_display_all() {
	oled_command(0xA5);
}

static void set_pixel(u1 x, u1 y, u1 w, u1 h) {
	if (w == 0 || h == 0) {
		printf("set pixel error, bad w or h");
		return;
	}
	
	if (x + w > SEGEMENT_SIZE || y + h > COLUMN_SIZE) {
		printf("set pixel beyond boundary");
		return;
	}
	
	oled_command(0xb0 + y);
	oled_command((x&0xf0)>>4|0x10);
	oled_command((x&0x0f));
	
}


void oled_write_page(u1* dat, u2 len) {
	oled_datas(dat, len);
}

void oled_show_gram() {
	u1 i;
	for (i = 0; i < 8; i++) {
		oled_command(0xb0 + i);
		oled_command(0x00);
		oled_command(0x10);
		oled_write_page(OLED_GRAM[i], SEGEMENT_SIZE);
	}
}

void oled_clear_gram() {
	u1 i, j;
	for (i = 0; i < 8; i++) {
		for (j = 0; j < SEGEMENT_SIZE; j++) {
			OLED_GRAM[i][j] = 0x0;
		}
	}
}

void oled_draw_point(u1 x, u1 y) {
	u1 page, mask;
	u1 offset;
	if (x > 131 || y > 63) {
		printf("oled_draw_point bad params");
		return;
	}
	
	page = y / 8;
	offset = y % 8;
	mask = 1 << offset; // one page, vertical 8 bit, up - down D0 - D7, display the corresponding bits was 1
	OLED_GRAM[page][x] |= mask;
}

void oled_fill_from_bitmap(u1 x, u1 y, u1 w, u1 h, u1 code *array) {
	u2 i, j;
	u2 bw = (w+7)/8;
	if (x > 132 || y >  64 || w > 132 || h > 64) {
		return;
	}

	for (j = 0; j < h; j++) {
		for (i = 0; i < w; i++) {
			if (*(array + j * bw + i / 8) & (132 >> (i&7))) {
				oled_draw_point(x+i, y+j);
			}
		}
	}	
}

void oled_fill_gram() {
	u1 i, j;
	for (i = 0; i < 8; i++) {
		for (j = 0; j < SEGEMENT_SIZE; j++) {
			OLED_GRAM[i][j] = 0xff;
		}
	}	
}

void oled_draw_xline(u1 x, u1 y, u1 len) {
	if (x > 131 || y > 63) {
		return;
	}
	
	if (x + len > 132) {
		len = 132 - x;
	}
	
	while(len--) {
		oled_draw_point(x+len, y);
	}
}

void oled_draw_yline(u1 x, u1 y, u1 len) {
	if (x > 131 || y > 63) {
		return;
	}
	
	if (y + len > 64) {
		len = 64 - y;
	}
	
	while(len--) {
		oled_draw_point(x, y+len);
	}
}

void oled_draw_xyline(u1 x1, u1 x2, u1 y1, u1 y2) { // wrong
	u1 dx = 0;
	u1 dy = 0;
	u1 k = 0;
	u1 inc = 0;
	u1 j;
	boolean isxeq = 0;
	// (y-y1)/(y2-y1)=(x-x1)/(x2-x1)
	if (x1 > 132 || x2 > 132 || y1 > 64 || y2 > 64) {
		return;
	}
	
	if (x1 == x2 && y1 == y2) {
		return;
	}

	if (x2 - x1 >= 0) {
		dx = x2 - x1;
	} else {
		dx = x1 - x2;
	}
	
	if (y2 - y1 >= 0) {
		dy = y2 - y1;
	} else {
		dy = y1 - y2;
	}
	
	k = dx*y1 - dy*x1;
	if (dx > 0) {
		inc = dx;
		isxeq = 1;
	}
	
	if (inc == 0) {
		inc = dy;
	}
	
	for (j = 0; j < inc; j++) {
		if (isxeq) {
			if (x1 > x2) {
				oled_draw_point(x1, y1);
				x1 = x1 + 1;
				y1 = (k + dy*x1)/dx;
			} else {
				oled_draw_point(x2, y2);
				x2 = x2 + 1;
				y2 = (k + dy*x2)/dx;
			}

		} else {
			if (y1 > y2) {
				oled_draw_point(x1, y1);
				y1 = y1+1;
				x1 = (dx*y1 - k)/dy;
			} else {
				oled_draw_point(x2, y2);
				y2 = y2+1;
				x2 = (dx*y2 - k)/dy;
			}
		}
	}
}

void oled_draw_rect(u1 x, u1 y, u1 w, u1 h) {
	oled_draw_xline(x, y, w);
	oled_draw_yline(x, y, h);
	oled_draw_yline(x+w-1, y, h);
	oled_draw_xline(x, y+h-1, w);
}

void oled_draw_solid_rect(u1 x, u1 y, u1 w, u1 h) {
	u1 i;
	for (i = x; i < x + w; i++) {
		oled_draw_yline(i, y, h);
	}
}

void oled_test() {
	u1 i, j;
	oled_fill_gram();
	oled_show_gram();
	time_HoggingDelayMs(500);
	oled_clear_gram();
	oled_show_gram();
	j = 0;
	for (i = 0; i < 64; i++) {
		oled_draw_point(j++, i);
	}
	
	oled_draw_xline(0, 3, 80);
	oled_draw_xline(0, 60, 80);
	oled_draw_yline(5, 0, 64);
	oled_draw_yline(7, 0, 30);
	oled_draw_yline(9, 30, 34);
	
	oled_draw_rect(40,5, 30, 40);
	oled_draw_solid_rect(80, 5, 40, 40);
	oled_show_gram();
	time_HoggingDelayMs(500);
	oled_clear_gram();
	oled_fill_from_bitmap(0, 0, 103, 64, gImage_sex);
	oled_show_gram();
	time_HoggingDelayMs(1000);
	oled_clear_gram();
	oled_fill_from_bitmap(0, 0, 101, 46, c_my_car);
	oled_show_gram();
	time_HoggingDelayMs(1000);
	oled_clear_gram();
}


